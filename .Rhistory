read.table(file = '~/Data/signif.txt.tsv', sep = '\t', header = TRUE)
read.table(file = '/Data/signif.txt.tsv', sep = '\t', header = TRUE)
read.table(file = '~/Data/signif.txt.tsv', sep = '\t', header = TRUE)
setwd("/Users/lancedacy/Dropbox/Education/MSDS/6306/6306-case-study-2")
read.table(file = '~/Data/signif.txt.tsv', sep = '\t', header = TRUE)
read.table(file = '/Data/signif.txt.tsv', sep = '\t', header = TRUE)
read.table(file = 'signif.txt.tsv', sep = '\t', header = TRUE)
read.table(file = "/Data/signif.txt.tsv", sep = "\t", header = TRUE)
read.table(file = "/Users/lancedacy/Dropbox/Education/MSDS/6306/6306-case-study-2/Data/signif.txt.tsv", sep = "\t", header = TRUE)
read.table(file = "/Data/signif.txt.tsv", sep = "\t", header = TRUE)
read.table(file = "Data/signif.txt.tsv", sep = "\t", header = TRUE)
df <- read.table(file = "Data/signif.txt.tsv", sep = "\t", header = TRUE)
df
require(data.table)
install.packages("data.table")
library(data.table)
data <- as.data.frame(fread("Data/signif.txt.tsv"))
data
View(data, 10)
View(data)
df <- as.data.frame(fread("Data/signif.txt.tsv"))
str(df)
head(df)
summary(df)
dim(df)
View(df)
plot(df$EQ_MAG_ML)
plot(df$EQ_MAG_ML, df$YEAR)
plot(df$YEAR, df$EQ_MAG_ML)
str(df)
url <- "https://www.ngdc.noaa.gov/nndc/struts/results?type_0=Exact&query_0=$ID&t=101650&s=13&d=189&dfn=signif.txt"
df <- as.data.frame(fread(url))
str(df)
df <- as.data.frame(fread(url))
download.file(url)
download.file(url, destfile = "./data/data.tsv", method="curl")
df <- as.data.frame(fread("./data/data.tsv"))
str(df)
head(df)
df <- as.data.frame(fread("./data/data.tsv"))
str(df)
colnames(df)
str(df)
url <- "https://www.ngdc.noaa.gov/nndc/struts/results?type_0=Exact&query_0=$ID&t=101650&s=13&d=189&dfn=signif.txt"
df <- as.data.frame(fread("./data/data.tsv"))
str(df)
colnames(df)
plot(df$EQ_PRIMARY)
barplot(df$EQ_PRIMARY)
scatterplot(df$EQ_PRIMARY)
plot(df$EQ_PRIMARY)
plot(df$EQ_PRIMARY, main="Total Earthquake Magnitude",
xlab="Observations", ylab="Magnitude")
plot(df$EQ_PRIMARY, main="Total Earthquake Magnitude",
xlab="Observations", ylab="Magnitude", col="Red")
plot(x=df$EQ_PRIMARY, y=df$YEAR, main="Total Earthquake Magnitude",
xlab="Observations", ylab="Magnitude", col="Red")
plot(y=df$EQ_PRIMARY, x=df$YEAR, main="Total Earthquake Magnitude",
xlab="Observations", ylab="Magnitude", col="Red")
plot(y=df$EQ_PRIMARY, [x=df$YEAR>1970], main="Total Earthquake Magnitude",
xlab="Observations", ylab="Magnitude", col="Red")
plot(y=df$EQ_PRIMARY, x=df$YEAR, main="Total Earthquake Magnitude",
xlab="Observations", ylab="Magnitude", col="Red")
df$EQ_PRIMARY
plot(y=df$EQ_PRIMARY, x=df$YEAR, main="Earthquake Magnitudes Over Time",
xlab="Observations", ylab="Magnitude", col="Red")
url <- "https://www.ngdc.noaa.gov/nndc/struts/results?type_0=Exact&query_0=$ID&t=101650&s=13&d=189&dfn=signif.txt"
download.file(url, destfile = "./data/data2.tsv", method="curl")
colnames(df)
plot(y=df$EQ_PRIMARY, x=df$YEAR, main="Earthquake Magnitudes Over Time",
xlab="Year", ylab="Magnitude", col="Red")
plot(y=df$TOTAL_DAMAGE_MILLIONS_DOLLARS, x=df$YEAR, main="Earthquake Damage Over Time",
xlab="Year", ylab="Damage (in millions)", col="Green")
plot(y=df$STATE, x=df$YEAR, main="Earthquakes by Region",
xlab="Year", ylab="Region", col="Blue")
plot(y=df$REGION_CODE, x=df$YEAR, main="Earthquakes by Region",
xlab="Year", ylab="Region", col="Blue")
barplot(x=df$REGION_CODE, y=df$YEAR, main="Earthquakes by Region",
xlab="Region", ylab="Year", col="Blue")
plot(y=df$REGION_CODE, x=df$YEAR, main="Earthquakes by Region",
xlab="Year", ylab="Region", col="Blue")
install.packages("maps")
library(maps)
area.map(df$REGION_CODE, regions = ".", sqmi=TRUE)
long <- c(-180,-50)
lat <- c(10,80)
map("world",regions=".*usa",xlim=long,ylim=lat)
View(df)
plot(y=df$COUNTRY, x=df$YEAR, main="Earthquakes by Region",
xlab="Year", ylab="Country", col="Blue")
df_country <- c(df$COUNTRY, df$EQ_PRIMARY, na=FALSE)
df_country
View(df_country)
df_country <- c(df$COUNTRY, df$DAMAGE_MILLIONS_DOLLARS, na=FALSE)
View(df_country)
df_country <- c(df$I_D, df$COUNTRY, df$DAMAGE_MILLIONS_DOLLARS, na=FALSE)
View(df_country)
colnames(df)
df_country <- df[,c("I_D", "COUNTRY", "TOTAL_DAMAGE_MILLIONS_DOLLARS")]
View(df_country)
df_country <- df[,c("I_D", "YEAR", "COUNTRY", "TOTAL_DAMAGE_MILLIONS_DOLLARS"), na=FALSE]
df_country <- na.omit(df[,c("I_D", "YEAR", "COUNTRY", "TOTAL_DAMAGE_MILLIONS_DOLLARS")])
View(df_country)
plot(y=df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS, x=df_country$YEAR, main="Earthquake Damage by Region",
xlab="Year", ylab="Damage (in millions)", col="Blue")
plot(y=df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS, x=df_country$COUNTRY, main="Earthquake Damage by Region",
xlab="Country", ylab="Damage (in millions)", col="Blue")
plot(y=df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS, x=df_country$YEAR, main="Earthquake Damage by Region",
xlab="Year", ylab="Country", col="Blue")
barplot(x=df_country$COUNTRY, y=df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS)
barplot(x=df_country$COUNTRY)
barplot(x=df_country)
plot(df_country$COUNTRY)
plot(df_country$COUNTRY, df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS)
df_country <- na.omit(df[,c("I_D", "YEAR", "COUNTRY", as.numeric("TOTAL_DAMAGE_MILLIONS_DOLLARS")])
df_country <- na.omit(df[,c("I_D", "YEAR", "COUNTRY", as.numeric(c("TOTAL_DAMAGE_MILLIONS_DOLLARS")])
df_country <- na.omit(df[,c("I_D", "YEAR", "COUNTRY", "TOTAL_DAMAGE_MILLIONS_DOLLARS")])
df_country <- na.omit(df[,c("I_D", "YEAR", "COUNTRY", as.numeric("TOTAL_DAMAGE_MILLIONS_DOLLARS"))])
df_country <- df[,c(na.omit("I_D"), na.omit("YEAR"), na.omit("COUNTRY"), na.omit("TOTAL_DAMAGE_MILLIONS_DOLLARS"))]
View(df_country)
df_country <- df[,c("I_D","YEAR","COUNTRY","TOTAL_DAMAGE_MILLIONS_DOLLARS")]
View(df_country)
df_country <- na.omit(df[,c("I_D","YEAR","COUNTRY","TOTAL_DAMAGE_MILLIONS_DOLLARS")])
View(df_country)
df_country <- na.omit(df[,c("I_D","YEAR","COUNTRY",as.numeric("TOTAL_DAMAGE_MILLIONS_DOLLARS"))])
df_country <- na.omit(df[,c("I_D","YEAR","COUNTRY","TOTAL_DAMAGE_MILLIONS_DOLLARS")])
View(df_country)
df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS <- as.numeric(df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS)
View(df_country)
df_country$YEAR <- as.numeric(df_country$YEAR)
View(df_country)
str(df_country)
plot(df_country$COUNTRY, df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS)
plot(x=df_country$COUNTRY, y=df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS)
summary(df_country)
is.na(df_country$COUNTRY)
barplot(x=df_country$COUNTRY, y=df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS)
barplot(df_country)
barplot(x=df_country$COUNTRY, y=df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS)
barplot(x=df_country$COUNTRY, y=sum(df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS))
df_country <- na.omit(df[,c("I_D","YEAR","COUNTRY",SUM("TOTAL_DAMAGE_MILLIONS_DOLLARS"))])
barplot(x=df_country$COUNTRY, y=SUM(df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS))
install.packages("usmaps")
library(usmaps)
df_state <- na.omit(df[,c("I_D","YEAR","STATE","TOTAL_DAMAGE_MILLIONS_DOLLARS")])
df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS <- as.numeric(df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS)
df_state$YEAR <- as.numeric(df_state$YEAR)
View(df_state)
str(df_state)
summary(df_state)
View(df_state)
usmap::plot_usmap(data = df_state,
values = "TOTAL_DAMAGE_MILLIONS_DOLLARS",
lines = "black") + scale_fill_continuous(
low = "green",
high = "red",
name = "Damages (in millions)",
label = scales::comma) + theme(legend.position = "right")+
labs(title = "Total Damages by State")
maps::plot_usmap(data = df_state,
values = "TOTAL_DAMAGE_MILLIONS_DOLLARS",
lines = "black") + scale_fill_continuous(
low = "green",
high = "red",
name = "Damages (in millions)",
label = scales::comma) + theme(legend.position = "right")+
labs(title = "Total Damages by State")
#Plot states and color by brewery counts
usmap::plot_usmap(data = df_state,
values = "TOTAL_DAMAGE_MILLIONS_DOLLARS",
lines = "black") + scale_fill_continuous(
low = "green",
high = "red",
name = "Damages (in millions)",
label = scales::comma) + theme(legend.position = "right")+
labs(title = "Total Damages by State")
install.packages("usmaps")
available.packages()
install.packages("usmaps")
install.packages("usMaps")
install.packages("usmap")
library(usmap)
usmap::plot_usmap(data = df_state,
values = "TOTAL_DAMAGE_MILLIONS_DOLLARS",
lines = "black") + scale_fill_continuous(
low = "green",
high = "red",
name = "Damages (in millions)",
label = scales::comma) + theme(legend.position = "right")+
labs(title = "Total Damages by State")
install.packages("ggplot2")
install.packages("data.table")
library(ggplot2)
usmap::plot_usmap(data = df_state,
values = "TOTAL_DAMAGE_MILLIONS_DOLLARS",
lines = "black") + scale_fill_continuous(
low = "green",
high = "red",
name = "Damages (in millions)",
label = scales::comma) + theme(legend.position = "right")+
labs(title = "Total Damages by State")
df_state
StateDB <- data.frame(state.name, state.abb, state.region)
StateDB
colnames(StateDB)[colnames(StateDB)=='state.name'] <- 'StateName'
colnames(StateDB)[colnames(StateDB)=='state.abb'] <- 'State'
colnames(StateDB)[colnames(StateDB)=='state.region'] <- 'StateRegion'
StateDB
DistrictColumbia <- data.frame("District of Columbia","DC", "South")
names(DistrictColumbia) <- c("StateName","State", "StateRegion")
StateDB <- rbind(StateDB, DistrictColumbia)
StateDB
DamagesCount <- data.frame(table(df_state$STATE))
DamagesCount
colnames(DamagesCount)[colnames(DamagesCount)=='Var1'] <- 'State'
colnames(DamagesCount)[colnames(DamagesCount)=='Freq'] <- 'NumberOfDamagesByState'
DamagesCount
DamagesCount <- merge(DamagesCount, StateDB, by.x=("State"), by.y=("State"))
DamagesCount <- BreweryCounts[order(DamagesCount$NumberOfDamagesByState, decreasing=TRUE),c(3,2)]
DamagesCount <- DamagesCount[order(DamagesCount$NumberOfDamagesByState, decreasing=TRUE),c(3,2)]
DamagesCount
data.frame(table(df_state$STATE))
DamagesCount
DamagesCountMap <- merge(statepop, DamagesCount, by.x=("full"), by.y=("StateName"))
DamagesCountMap
usmap::plot_usmap(data = df_state,
values = "NumberOfDamagesByState",
lines = "black") + scale_fill_continuous(
low = "green",
high = "red",
name = "Damages (in millions)",
label = scales::comma) + theme(legend.position = "right")+
labs(title = "Total Damages by State")
DamagesCountMap
usmap::plot_usmap(data = DamagesCountMap,
values = "NumberOfDamagesByState",
lines = "black") + scale_fill_continuous(
low = "green",
high = "red",
name = "Damages (in millions)",
label = scales::comma) + theme(legend.position = "right")+
labs(title = "Total Damages by State")
DamagesCount2 <- data.frame(table(df_state$STATE, df$TOTAL_DAMAGE_MILLIONS_DOLLARS))
data.frame(table(df_state$STATE, df$TOTAL_DAMAGE_MILLIONS_DOLLARS))
DamagesCount2 <- data.frame(table(df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS))
DamagesCount2
DamagesCount <- c(df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS)
DamagesCount
View(DamagesCount)
DamagesCount <- data.frame(table(df_state$STATE))
View(DamagesCount)
cbind(DamagesCount, df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS[, 1:3])
cbind(DamagesCount, df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS[, 1:2])
DamagesCount <- merge(DamagesCount, df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS, by.x("State"), by.y=("STATE"))
DamagesCount <- merge(DamagesCount, df_state, by.x("State"), by.y=("STATE"))
DamagesCount <- merge(DamagesCount, df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS, by.x=("State"), by.y=("STATE"))
DamagesCount
StateDB
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
library(plyr)
aggregate(df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS ~ df_state$STATE, data = df_state, sum)
DamagesTotal <- aggregate(df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS ~ df_state$STATE, data = df_state, sum)
DamagesTotal
colnames(DamagesTotal)[colnames(DamagesTotal)=='df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS'] <- 'TotalDamagesByState'
colnames(DamagesTotal)[colnames(DamagesTotal)=='df_state$STATE'] <- 'State'
DamagesTotal
DamagesTotal <- merge(DamagesTotal, StateDB, by.x=("State"), by.y=("State"))
DamagesTotal <- DamagesTotal[order(DamagesTotal$TotalDamagesByState, decreasing=TRUE),c(3,2)]
DamagesTotal
DamagesTotalMap <- merge(statepop, DamagesTotal, by.x=("full"), by.y=("StateName"))
statepop
DamagesCountMap
DamagesTotal
usmap::plot_usmap(data = DamagesCountMap,
values = "NumberOfDamagesByState",
lines = "black") + scale_fill_continuous(
low = "green",
high = "red",
name = "Damage Counts",
label = scales::comma) + theme(legend.position = "right")+
labs(title = "Total Counts by State")
library(ggplot2)
setwd("/Users/lancedacy/Dropbox/Education/MSDS/6306/6306-case-study-2")
library(data.table)
library(usmap)
library(maps)
library(plyr)
url <- "https://www.ngdc.noaa.gov/nndc/struts/results?type_0=Exact&query_0=$ID&t=101650&s=13&d=189&dfn=signif.txt"
download.file(url, destfile = "./data/data.tsv", method="curl")
df <- as.data.frame(fread("./data/data.tsv"))
df_country <- na.omit(df[,c("I_D","YEAR","COUNTRY","TOTAL_DAMAGE_MILLIONS_DOLLARS")])
df_state <- na.omit(df[,c("I_D","YEAR","STATE","TOTAL_DAMAGE_MILLIONS_DOLLARS")])
df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS <- as.numeric(df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS)
df_country$YEAR <- as.numeric(df_country$YEAR)
df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS <- as.numeric(df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS)
df_state$YEAR <- as.numeric(df_state$YEAR)
View(df_country)
View(df_state)
plot(y=df$EQ_PRIMARY, x=df$YEAR, main="Earthquake Magnitudes Over Time",
xlab="Year", ylab="Magnitude", col="Red")
plot(y=df$TOTAL_DAMAGE_MILLIONS_DOLLARS, x=df$YEAR, main="Earthquake Damage Over Time",
xlab="Year", ylab="Damage (in millions)", col="Green")
plot(y=df_country$TOTAL_DAMAGE_MILLIONS_DOLLARS, x=df_country$YEAR, main="Earthquake Damage by Region",
xlab="Year", ylab="Country", col="Blue")
StateDB <- data.frame(state.name, state.abb, state.region)
colnames(StateDB)[colnames(StateDB)=='state.name'] <- 'StateName'
colnames(StateDB)[colnames(StateDB)=='state.abb'] <- 'State'
colnames(StateDB)[colnames(StateDB)=='state.region'] <- 'StateRegion'
DistrictColumbia <- data.frame("District of Columbia","DC", "South")
names(DistrictColumbia) <- c("StateName","State", "StateRegion")
StateDB <- rbind(StateDB, DistrictColumbia)
DamagesCount <- data.frame(table(df_state$STATE))
colnames(DamagesCount)[colnames(DamagesCount)=='Var1'] <- 'State'
colnames(DamagesCount)[colnames(DamagesCount)=='Freq'] <- 'NumberOfDamagesByState'
DamagesCount <- merge(DamagesCount, StateDB, by.x=("State"), by.y=("State"))
DamagesCount <- DamagesCount[order(DamagesCount$NumberOfDamagesByState, decreasing=TRUE),c(3,2)]
DamagesCount
DamagesCountMap <- merge(statepop, DamagesCount, by.x=("full"), by.y=("StateName"))
usmap::plot_usmap(data = DamagesCountMap,
values = "NumberOfDamagesByState",
lines = "black") + scale_fill_continuous(
low = "green",
high = "red",
name = "Damage Counts",
label = scales::comma) + theme(legend.position = "right")+
labs(title = "Total Counts by State")
DamagesTotal <- aggregate(df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS ~ df_state$STATE, data = df_state, sum)
colnames(DamagesTotal)[colnames(DamagesTotal)=='df_state$STATE'] <- 'State'
colnames(DamagesTotal)[colnames(DamagesTotal)=='df_state$TOTAL_DAMAGE_MILLIONS_DOLLARS'] <- 'TotalDamagesByState'
DamagesTotal <- merge(DamagesTotal, StateDB, by.x=("State"), by.y=("State"))
DamagesTotal <- DamagesTotal[order(DamagesTotal$TotalDamagesByState, decreasing=TRUE),c(3,2)]
DamagesTotal
DamagesTotalMap <- merge(statepop, DamagesTotal, by.x=("full"), by.y=("StateName"))
usmap::plot_usmap(data = DamagesTotalMap,
values = "TotalDamagesByState",
lines = "black") + scale_fill_continuous(
low = "green",
high = "red",
name = "Damages (in millions)",
label = scales::comma) + theme(legend.position = "right")+
labs(title = "Total Damages by State")
statepop
StateDB
DamagesTotalMap
usmap::plot_usmap(data = DamagesTotalMap,
values = "TotalDamagesByState",
lines = "black") + scale_fill_gradient(
low = "green",
high = "red",
name = "Damages (in millions)",
label = scales::comma) + theme(legend.position = "right")+
labs(title = "Total Damages by State")
statepop
usmap::plot_usmap(data = statepop,
values = "pop_2015",
lines = "black") + scale_fill_continuous(
low = "green",
high = "red",
name = "Popluation",
label = scales::comma) + theme(legend.position = "right")+
labs(title = "Total Population")
install.packages("randomForest")
library(randomForest)
data(iris)
iris
iris.rf <- randomForest(iris[,-5], iris[,5], prox=TRUE)
iris.p <- classCenter(iris[,-5], iris[,5], iris.rf$prox)
plot(iris[,3], iris[,4], pch=21, xlab=names(iris)[3], ylab=names(iris)[4],
bg=c("red", "blue", "green")[as.numeric(factor(iris$Species))],
main="Iris Data with Prototypes")
points(iris.p[,3], iris.p[,4], pch=21, cex=2, bg=c("red", "blue", "green"))
iris.rf
iris.p
rf1 <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
rf2 <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
rf3 <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
rf.all <- combine(rf1, rf2, rf3)
print(rf.all)
print(rf.all)
rf.all
combine(rf1, rf2, rf3)
rf1
getTree
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE)
iris.rf <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
iris.rf <- grow(iris.rf, 50)
print(iris.rf)
library(randomForest)
df_iris <- iris
M <- df_iris[,-5] #Matrix, so remove target, i.e. type of flower
L <- df_iris[,5] #labels, so select only target i.e. type of flower
M
L
iris.rf <- randomForest(M, L)
iris.rf
iris.rf$importance
library(pROC)
library(randomForest)
library(ggplot2)
library(reshape2)
install.packages("pROC")
library(pROC)
file_loc <-"http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
wine <- read.csv(url(file_loc), sep=";")
ggplot(data = melt(wine), mapping = aes(x = value)) + geom_histogram(bins = 20) + facet_wrap(~variable, scales = 'free_x')
clf_1 <- randomForest(wine[,-12],wine[,12])
clf_1
clf_1a <- randomForest(wine[,-12],as.factor(wine[,12]))
clf_1a
clf_2 <- randomForest(wine[,-12],as.factor(wine[,12]>=6))
clf_2
num_exmps = nrow(wine)
L = replace(integer(num_exmps), wine[,12]>=6, 1)
M <- wine[,-12]
train_idx <- sample(c(1:num_exmps), size = num_exmps * 0.7, replace = FALSE)
clf_3 <- randomForest(M[train_idx,],as.factor(L[train_idx]))
pred <- predict(clf_3, M[-train_idx,],type="prob")
plot(roc(L[-train_idx], as.numeric(pred[,1])))
iris
df_iris
M
wine
ggplot(data = melt(wine), mapping = aes(x = value)) + geom_histogram(bins = 20) + facet_wrap(~variable, scales = 'free_x')
iris
colnames(wine)
clf_2
num_exmps
M
df
